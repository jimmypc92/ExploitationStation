#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include <psapi.h>

void PrintProcessNameAndID(DWORD processID)
{
	TCHAR szProcessName[MAX_PATH] = TEXT("<unknown>");

	// Get a handle to the process.

	HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION |
		PROCESS_VM_READ,
		FALSE, processID);

	// Get the process name.

	if (NULL != hProcess)
	{
		HMODULE hMod;
		DWORD cbNeeded;

		if (EnumProcessModules(hProcess, &hMod, sizeof(hMod),
			&cbNeeded))
		{
			GetModuleBaseName(hProcess, hMod, szProcessName,
				sizeof(szProcessName) / sizeof(TCHAR));
		}
	}

	// Print the process name and identifier.

	_tprintf(TEXT("%s  (PID: %u)\n"), szProcessName, processID);

	// Release the handle to the process.

	CloseHandle(hProcess);
}

void cleanup();

HANDLE hProcess;
HANDLE hThread;
int main(void) {

	//
	// Get the list of process identifiers.
	DWORD aProcesses[1024], cbNeeded, cProcesses;
	unsigned int i;

	if (!EnumProcesses(aProcesses, sizeof(aProcesses), &cbNeeded))
	{
		return 1;
	}

	//
	// Calculate how many process identifiers were returned.
	cProcesses = cbNeeded / sizeof(DWORD);

	//
	// Print the name and process identifier for each process.
	for (i = 0; i < cProcesses; i++)
	{
		if (aProcesses[i] != 0)
		{
			PrintProcessNameAndID(aProcesses[i]);
		}
	}

	DWORD procId;

	printf("What id the id of the target process?\n");
	scanf("%d", &procId);

	hProcess = OpenProcess(PROCESS_ALL_ACCESS, true, procId);

	if (hProcess == NULL) {
		printf("Failed to open process with id: %d", procId);
		cleanup();
		return GetLastError();
	}

	LPVOID buffer;
	buffer = VirtualAllocEx(hProcess, NULL, 1024, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

	if (buffer == NULL) {
		printf("Could not allocate buffer in remote process\n");
		cleanup();
		return GetLastError();
	}

	char input[1024];
	printf("What would you like to write to the remote process?\n");
	do {
		fgets(input, 1024, stdin);
	} while (input[0] == '\n');

	int len = strlen(input);
	if (input[len - 1] == '\n') {
		input[len - 1] = '\0';
	}

	BOOL res;
	SIZE_T written;
	res = WriteProcessMemory(hProcess, buffer, input, 1024, &written);

	if (!res) {
		printf("Problem writing to remote process.\n");
		cleanup();
		return GetLastError();
	}

	char output[1024];
	SIZE_T read;
	res = ReadProcessMemory(hProcess, buffer, output, 1024, &read);

	if (res == 0) {
		printf("Could not read the remote process memory.\n");
		cleanup();
		return GetLastError();
	}

	FARPROC fnLoadLibrary;
	fnLoadLibrary = GetProcAddress(GetModuleHandle(TEXT("Kernel32")), "LoadLibraryA");

	if (fnLoadLibrary == NULL) {
		printf("Failed to get LoadLibrary.\n");
		cleanup();
		return GetLastError();
	}

	LPDWORD rmThreadId;
	hThread = CreateRemoteThread(hProcess, NULL, 0x1000000, (LPTHREAD_START_ROUTINE) fnLoadLibrary, buffer, 0, NULL);

	if (hThread == NULL) {
		printf("Error creating remote thread.\n");
		cleanup();
		return GetLastError();
	}

	DWORD waitResult;
	waitResult = WaitForSingleObject(hThread, 10000);

	if (waitResult == WAIT_TIMEOUT) {
		printf("Waiting for remote thread timed out.\n");
		cleanup();
		return 1;
	}
	else if (waitResult == WAIT_FAILED) {
		printf("Waiting for remote thread failed.\n");
		cleanup();
		return GetLastError();
	}
	else if (waitResult == WAIT_ABANDONED) {
		cleanup();
		printf("Waiting for remote process abandoned");
	}

	DWORD remoteDll;
	res = GetExitCodeThread(hThread, &remoteDll);
	
	if (res == 0) {
		printf("Failure getting thread exit code.\n");
		cleanup();
		GetLastError();
	}

	printf("Remote thread completed. Dll injection successful");

	char* pipeName = "exploit";
	strcpy(input, pipeName);
	res = WriteProcessMemory(hProcess, buffer, input, 1024, &written);

	if (!res) {
		printf("Problem writing to remote process.\n");
		printf("Tried to write %s.", input);
		cleanup();
		return GetLastError();
	}

	FARPROC fnOpenInjectionServer = ;

	cleanup();
	return 0;
}

void cleanup() {
	if (hProcess != NULL) {
		CloseHandle(hProcess);
		hProcess = NULL;
	}

	if (hThread != NULL) {
		CloseHandle(hThread);
		hThread = NULL;
	}
}